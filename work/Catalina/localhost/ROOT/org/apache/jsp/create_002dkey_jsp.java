/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.24
 * Generated at: 2024-12-11 15:59:23 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class create_002dkey_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"vi\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("    <meta charset=\"UTF-8\">\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("    <title>Asymmetric Encryption Example</title>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/key.css\">\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<div class=\"container\">\r\n");
      out.write("\r\n");
      out.write("    ");

        String message = (String) session.getAttribute("message");
        if (message != null) {
            session.removeAttribute("message"); // Xóa thông báo sau khi hiển thị
    
      out.write("\r\n");
      out.write("    <div class=\"alert\" style=\"background-color: #f8d7da; color: #721c24; padding: 10px; border-radius: 5px; font-size: 1.2em; font-weight: bold; margin: 10px 0;\">\r\n");
      out.write("        ");
      out.print( message );
      out.write("\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    ");

        }
    
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    <h1>");
      out.print( request.getAttribute("message") != null ? request.getAttribute("message") : "" );
      out.write("</h1>\r\n");
      out.write("    <h1>Tạo khóa</h1>\r\n");
      out.write("    <form id=\"key-form\" method=\"post\" action=\"/digital-signature\">\r\n");
      out.write("        <div class=\"key-generation-section\">\r\n");
      out.write("            <button type=\"submit\" name=\"action\" value=\"generateKey\" id=\"generate-keys-btn\">Tạo Khóa Mới</button>\r\n");
      out.write("            <div>\r\n");
      out.write("                <label for=\"public-key\">Khóa Công Khai (Public Key):</label>\r\n");
      out.write("                <textarea id=\"public-key\" name=\"publickey\" rows=\"4\" readonly placeholder=\"Khóa công khai sẽ hiển thị ở đây...\">");
      out.print( request.getAttribute("publickey") != null ? request.getAttribute("publickey") : "" );
      out.write("</textarea>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <label for=\"private-key\">Khóa Riêng (Private Key):</label>\r\n");
      out.write("                <textarea id=\"private-key\" rows=\"4\" readonly placeholder=\"Khóa riêng sẽ hiển thị ở đây...\">");
      out.print( request.getAttribute("privatekey") != null ? request.getAttribute("privatekey") : "" );
      out.write("</textarea>\r\n");
      out.write("            </div>\r\n");
      out.write("            <div>\r\n");
      out.write("                <button type=\"button\" id=\"download-private-key-btn\">Tải Khóa Riêng Xuống</button>\r\n");
      out.write("            </div>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"file-upload-section\">\r\n");
      out.write("            <label for=\"upload-public-key\">Tải khóa công khai (Public Key) từ tệp:</label>\r\n");
      out.write("            <input type=\"file\" id=\"upload-public-key\" name=\"uploadPublicKey\" accept=\".txt\">\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"public-key-upload\">\r\n");
      out.write("            <button type=\"submit\" name=\"action\" value=\"uploadPublicKey\">Tải Lên</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"submit-section\">\r\n");
      out.write("            <button type=\"submit\" name=\"action\" value=\"submitForm\" id=\"submit-btn\">Gửi Khóa</button>\r\n");
      out.write("        </div>\r\n");
      out.write("        <div class=\"notification-section\">\r\n");
      out.write("            <a href=\"notify.jsp\">\r\n");
      out.write("                <button type=\"button\" id=\"reveal-key-btn\">Thông Báo Lộ Key</button>\r\n");
      out.write("            </a>\r\n");
      out.write("        </div>\r\n");
      out.write("    </form>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/jsrsasign@10.0.6/lib/jsrsasign-all-min.js\"></script>\r\n");
      out.write("<script src=\"script.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("    // Tạo chức năng tải khóa riêng xuống\r\n");
      out.write("    document.getElementById('download-private-key-btn').addEventListener('click', function() {\r\n");
      out.write("        // Lấy nội dung từ textarea (Khóa Riêng)\r\n");
      out.write("        const privateKeyText = document.getElementById('private-key').value;\r\n");
      out.write("\r\n");
      out.write("        const blob = new Blob([privateKeyText], { type: 'text/plain' });\r\n");
      out.write("\r\n");
      out.write("        const url = URL.createObjectURL(blob);\r\n");
      out.write("\r\n");
      out.write("        const link = document.createElement('a');\r\n");
      out.write("        link.href = url;\r\n");
      out.write("        link.download = 'private_key.txt';\r\n");
      out.write("        link.click();\r\n");
      out.write("\r\n");
      out.write("        URL.revokeObjectURL(url);\r\n");
      out.write("    });\r\n");
      out.write("    // Tạo chức năng upload public key\r\n");
      out.write("    document.querySelector('button[name=\"action\"][value=\"uploadPublicKey\"]').addEventListener('click', function(event) {\r\n");
      out.write("        event.preventDefault(); // Ngăn gửi form tự động\r\n");
      out.write("\r\n");
      out.write("        const fileInput = document.getElementById('upload-public-key');\r\n");
      out.write("        const file = fileInput.files[0]; // Lấy tệp đã chọn\r\n");
      out.write("\r\n");
      out.write("        if (file) {\r\n");
      out.write("            const reader = new FileReader();\r\n");
      out.write("            reader.onload = function(e) {\r\n");
      out.write("                // Nội dung tệp Public Key\r\n");
      out.write("                const publicKeyContent = e.target.result;\r\n");
      out.write("\r\n");
      out.write("                // Hiển thị nội dung trong textarea của public key\r\n");
      out.write("                document.getElementById('public-key').value = publicKeyContent;\r\n");
      out.write("            };\r\n");
      out.write("\r\n");
      out.write("            reader.readAsText(file); // Đọc tệp dưới dạng text\r\n");
      out.write("        } else {\r\n");
      out.write("            alert('Vui lòng chọn tệp trước khi tải lên!');\r\n");
      out.write("        }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
